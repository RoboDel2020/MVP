<html>
<head>
    <title>Robots</title>
    <link rel="stylesheet" href="~/css/leaflet.css" />
    <script src="~/js/leaflet.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/dataTables.bootstrap4.min.css">
    <script src="https://cdn.datatables.net/1.10.21/js/dataTables.bootstrap4.min.js"></script>

    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />
    <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script>
        var courierID = 0;
        var courierLongitude = 0;
        var courierLatitude = 0;
        $(document).ready(function () {
            var table = $('#robotsTable').DataTable({
                "order": [[7, "asc"]]
            });

            $('#button').click(function () {
                courierID = table.row('.selected').data()[0];
                $.ajax({
                    type: "POST",
                    url: "/AssignRobot/AssignRobotToOrder",
                    async: true,
                    dataType: "json",
                    data: { inputOrderID: @ViewBag.orderID, inputCourierID: courierID},
                    success: function (data) {
                        if (data.errMsg != "") {
                            alert(String(data.errMsg));
                        } else {
                            window.location.href = '/Order/Index';
                        }
                    },
                    error: function () {
                        return "error";
                    }
                });
                @*alert("barev apeer"+courierID +' '+ '@ViewBag.orderID');*@
            });

            $('#robotsTable tbody').on('click', 'tr', function () {
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                }
                else {
                    table.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
                var rowData = table.row('.selected').data()[0];

            });
            var dist = 0;
            var theRoute = {};
            $('#robotsTable tbody').on('click', 'tr', function () {
                    courierID = table.row('.selected').data()[0];
                    courierLongitude = table.row('.selected').data()[4];
                    courierLatitude = table.row('.selected').data()[5];
                    var coordinatesForMap = [];
                    var request = new XMLHttpRequest();
                url = 'https://api.openrouteservice.org/v2/directions/foot-walking?api_key=5b3ce3597851110001cf62488303e1e1bcb64deb91105af7032e30d4&start=' + courierLongitude + ',' + courierLatitude + '&end=' + '@ViewBag.restaurantLongitude' + ','+'@ViewBag.restaurantLatitude' ;
                    request.open('GET', url);
                    request.setRequestHeader('Accept', 'application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8');
                    request.onreadystatechange = function () {
                        if (this.readyState === 4) {
                            @* console.log('Status:', this.status);*@
                            @* console.log('Headers:', this.getAllResponseHeaders());*@
                            @* console.log('Body:', this.responseText);*@
                            const bodyJson = JSON.parse(this.responseText);
                            @*console.log('JSON :', bodyJson);*@

                            var coordinates = bodyJson.features[0].geometry.coordinates;
                            for (let i = 0; i < coordinates.length; i++) {
                                var newCoordinate = [coordinates[i][0], coordinates[i][1]];
                                coordinatesForMap.push(newCoordinate);
                                @*console.log(coordinates[i]);*@
                            }
                            @*console.log('Full coordinates:', coordinatesForMap.slice(0, -1));*@
                            var myRoute = [{
                                "type": "LineString",
                                "coordinates": coordinatesForMap

                            }];

                            var myRouteStyle = {
                                "color": "#0000FF",
                                "weight": 6,
                                "opacity": 0.9
                            };

                            if (theRoute != undefined) {
                                map.removeLayer(theRoute);
                            };
                            theRoute = L.geoJSON(myRoute, {
                                style: myRouteStyle
                            }).addTo(map);

                            @*console.log('Body:', bodyJson.features[0].geometry.coordinates);*@
                            @*console.log('Distance in km:', bodyJson.features[0].properties.summary.distance / 1000);
                            console.log('Duration in minutes:', bodyJson.features[0].properties.summary.duration / 60);*@
                            dist = bodyJson.features[0].properties.summary.distance / 1000;
                        }
                    };
                request.send();
            });
        });



    </script>
    <style>
        .logout_btn {
            font-size: 15px;
            transition: ease-in all 0.5s;
            background-color: #f5b707;
            color: #fff;
            position: fixed;
            right: 20px;
            top: 10px;
            padding: 6px 13px;
        }

            .logout_btn:hover {
                background-color: #232323;
                color: #fff;
                transition: ease-in all 0.5s;
                border-radius: 26px;
            }

        .logo_text {
            color: #f5b707;
            font-size: 30px;
            font-weight: bold;
            margin-top: 5px
        }

        #map {
            height: 500px;
            width: 100%;
        }
        html, body {
            min-height: 100%;
            min-width: 100%;
        }
        .container, pb-3 {
            width: 100%;
            max-width: 3000px;
            min-width: 100%;
            margin: 0px;
            padding: 0px;
        }

        .maincontainer {
            margin: 0px 50px 0px 50px;
        }
        
    </style>


</head>
<body>

    <div>
        <h1 class="logo_text"><a href="javascript:GoMainMenu()">RoboDel<a /></h1>
        <button class="logout_btn" type="button" onclick="Logout()">Logout</button>
        <hr>
    </div>
    <br>
    <div class="maincontainer">

        <h1>All Robots</h1>    <br>
        Distance from Restaurant To Customer: @string.Format("{0:0.00}", @ViewBag.distanceFromRestaurantToCustomer) km<br>
        Duration from Restaurant To Customer: @string.Format("{0:0.0}", @ViewBag.durationFromRestaurantToCustomer) minutes<br>

        @ViewBag.orderID    <br>

        @ViewBag.orderLongitude   <br>

        @ViewBag.orderLatitude    <br>

        @ViewBag.restaurantLongitude    <br>

        @ViewBag.restaurantLatitude    <br>

        <br>

        <div class="row">
            <div class="col-md-6">
                <table id="robotsTable" class="table table-bordered table-striped" style="width:100%">
                    <thead>
                        <tr>
                            <th><b>RID</b></th>
                            <th><b>Location</b></th>
                            <th><i class='bx bx-battery nav_icon'></i></th>
                            <th><b>DID</b></th>
                            <th><b>Lon</b></th>
                            <th><b>Lat</b></th>
                            <th><b>Distance(km)</b></th>
                            <th><b>Duration(m)</b></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (CourierForDelivery courierForDelivery in ViewBag.allActiveCouriersForDelivery)
                        {
                            <tr>
                                <td>@courierForDelivery.Robot.CourierID</td>
                                <td>@courierForDelivery.Robot.City @courierForDelivery.Robot.State @courierForDelivery.Robot.Country</td>
                                <td>@courierForDelivery.Robot.CurrentRobotStatistics.Battery %</td>
                                @if (@courierForDelivery.Delivery.ID > 0)
                                {
                                    <td>@courierForDelivery.Delivery.ID</td>
                                }
                                else
                                {
                                    <td></td>
                                }
                                @if (@courierForDelivery.Delivery.Order.Longitude != 0 && @courierForDelivery.Delivery.Order.Latitude != 0)
                                {
                                    <td>@courierForDelivery.Delivery.Order.Longitude</td>
                                    <td>@courierForDelivery.Delivery.Order.Latitude</td>
                                }
                                else
                                {
                                    <td>@courierForDelivery.Robot.CurrentRobotStatistics.Longitude</td>
                                    <td>@courierForDelivery.Robot.CurrentRobotStatistics.Latitude</td>
                                }

                                <td>@string.Format("{0:0.00}", @courierForDelivery.Distance)</td>
                                <td>@string.Format("{0:0.00}", @courierForDelivery.Duration)</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button id="button" class="btn btn-success">Delete selected row</button>

            </div>
            <div class="col-md-6">
                <div id="map" style="width: 100%; height: 580px"></div>
            </div>
        </div>


        <script>
        let customIconWhite = {
        iconUrl: "https://drive.google.com/uc?export=view&id=1EziGBt6GwQXZW19tvbyzeusY3ubbRiyd",
            iconSize: [50, 40]
        }
        let customIconRed = {
            iconUrl: "https://drive.google.com/uc?export=view&id=1KSi-1T82_GLB7OGbz0ZPQpdNmwweT3Pz",
            iconSize: [50, 40]
        }
        let customIconOrange = {
            iconUrl: "https://drive.google.com/uc?export=view&id=1EI2fAcbH8yqSgAH-iD5tAI_b0FAtusl7",
            iconSize: [50, 40]
        }
        let myIconWhite = L.icon(customIconWhite);
        let myIconRed = L.icon(customIconRed);
        let myIconOrange = L.icon(customIconOrange);

        let iconOptionsWhite = {
            title: "Robot",
            draggable: false,
            icon: myIconWhite
        }
        let iconOptionsRed = {
            title: "Robot",
            draggable: false,
            icon: myIconRed
        }
        let iconOptionsOrange = {
            title: "Robot",
            draggable: false,
            icon: myIconOrange
        }

        let customMarkerGreen = {
            iconUrl: "https://drive.google.com/uc?export=view&id=1UzHM1VgWffMn06Lj4iSRSQzOlQSBWw3K",
            iconSize: [40, 40]
        }

        let myMarkerGreen = L.icon(customMarkerGreen);

        let markerOptionsGreen = {
            title: "Customer",
            draggable: false,
            icon: myMarkerGreen
        }
        let customMarkerRed = {
            iconUrl: "https://drive.google.com/uc?export=view&id=11bv7ohdrxLAmR_lOXQ_WFAQpQbRsOkG9",
            iconSize: [40, 40]
        }

        let myMarkerRed = L.icon(customMarkerRed);

        let markerOptionsRed = {
            title: "Restaurant",
            draggable: false,
            icon: myMarkerRed
        }

        var map = L.map('map').setView([@ViewBag.restaurantLatitude, @ViewBag.restaurantLongitude], 15);

        mapLink =
            '<a href="http://openstreetmap.org">OpenStreetMap</a>';
        L.tileLayer(
            'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; ' + mapLink + ' Contributors',
            maxZoom: 18,
        }).addTo(map);

        theRestaurantMarker = L.marker([@ViewBag.restaurantLatitude, @ViewBag.restaurantLongitude], markerOptionsRed).bindPopup("Restaurant").addTo(map);
        theCustomerMarker = L.marker([@ViewBag.orderLatitude, @ViewBag.orderLongitude], markerOptionsGreen).bindPopup("Customer").addTo(map);

        var sourcearray = @Json.Serialize(@ViewBag.robots);
        for (var i = 0; i < sourcearray.length; i++) {
            var robot = sourcearray[i];
            if (robot.currentRobotStatistics.longitude != 0) {
                if (robot.currentRobotStatistics.battery <= 10) {
                    L.marker([robot.currentRobotStatistics.latitude, robot.currentRobotStatistics.longitude], iconOptionsRed).bindPopup("Robot " + robot.courierID + "<br>" + "Battery: " + robot.currentRobotStatistics.battery + "%" + "<br>" + "Speed: " + robot.currentRobotStatistics.speed + "km/h").addTo(map);
                } else if (robot.currentRobotStatistics.battery <= 30) {
                    L.marker([robot.currentRobotStatistics.latitude, robot.currentRobotStatistics.longitude], iconOptionsOrange).bindPopup("Robot " + robot.courierID + "<br>" + "Battery: " + robot.currentRobotStatistics.battery + "%" + "<br>" + "Speed: " + robot.currentRobotStatistics.speed + "km/h").addTo(map);
                } else {
                    L.marker([robot.currentRobotStatistics.latitude, robot.currentRobotStatistics.longitude], iconOptionsWhite).bindPopup("Robot " + robot.courierID + "<br>" + "Battery: " + robot.currentRobotStatistics.battery + "%" + "<br>" + "Speed: " + robot.currentRobotStatistics.speed + "km/h").addTo(map);
                }
            }
        }


            var myStyleToCustomer = {
            "color": "#006400",
            "weight": 6,
            "opacity": 0.9
        };

        var coordinatesFromRestaurantToCustomer = [];
        var request = new XMLHttpRequest();
        url = 'https://api.openrouteservice.org/v2/directions/foot-walking?api_key=5b3ce3597851110001cf62488303e1e1bcb64deb91105af7032e30d4&start=' + '@ViewBag.orderLongitude' + ',' + '@ViewBag.orderLatitude' + '&end=' + '@ViewBag.restaurantLongitude' + ','+'@ViewBag.restaurantLatitude' ;
        request.open('GET', url);
        request.setRequestHeader('Accept', 'application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8');
        request.onreadystatechange = function () {
            if (this.readyState === 4) {
                @* console.log('Status:', this.status);*@
                @* console.log('Headers:', this.getAllResponseHeaders());*@
                @* console.log('Body:', this.responseText);*@
                const bodyJson = JSON.parse(this.responseText);

                var coordinates = bodyJson.features[0].geometry.coordinates;
                for (let i = 0; i < coordinates.length; i++) {
                    var newCoordinate = [coordinates[i][0], coordinates[i][1]];
                    coordinatesFromRestaurantToCustomer.push(newCoordinate);
                }
                var myRouteToCustomer = [{
                    "type": "LineString",
                    "coordinates": coordinatesFromRestaurantToCustomer

                }];


                theRouteToCustomer = L.geoJSON(myRouteToCustomer, {
                    style: myStyleToCustomer
                }).addTo(map);

                @*console.log('Body:', bodyJson.features[0].geometry.coordinates);*@
                @*console.log('Distance in km to Customer:', bodyJson.features[0].properties.summary.distance / 1000);
                console.log('Duration in minutes to Customer:', bodyJson.features[0].properties.summary.duration / 60);*@
            }
        };
        request.send();

        L.geoJSON(myLines, {
            style: myStyle
        }).addTo(map);


        </script>





        <script>function Logout() {
                $.ajax({
                    type: "POST",
                    url: "/Login/Logout",
                    async: true,
                    dataType: "json",
                    data: {},
                    success: function (data) {
                        window.location.href = '/Login/Index';
                    }
                });
            }

            function GoMainMenu() {
                $.ajax({
                    type: "POST",
                    url: "/MainMenu/GoMainMenu",
                    async: true,
                    dataType: "json",
                    data: {},
                    success: function (data) {
                        if (data.errMsg != "") {
                            alert(String(data.errMsg));
                        } else {
                            window.location.href = '/MainMenu/Index';
                        }
                    },
                    error: function () {
                        return "error";
                    }
                });
            }</script>

        <script src="~/js/jquery-3.0.0.min.js"></script>
        <!-- sidebar -->
        <script src="https:cdnjs.cloudflare.com/ajax/libs/fancybox/2.1.5/jquery.fancybox.min.js"></script>
    </div>
</body>
</html>